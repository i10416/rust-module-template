name: ci

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [master, main]
    types:
      - opened
      - synchronize
      - reopened
      - closed
    paths-ignore:
      - '**.md'
env:
  app_name: example
jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: set up key
        env:
          PRIVATE_KEY: ${{ secrets.SSH_GITHUB_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          echo 'net.git-fetch-with-cli = true' >> ~/.cargo/config
      - name: setup protoc
        run: |
          curl -LsS -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-linux-x86_64.zip
          unzip protoc.zip -d protoc3
          sudo mv protoc3/bin/* /usr/local/bin/
          sudo mv protoc3/include/* /usr/local/include/
          protoc --version
      - name: setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          components: rustfmt, clippy
          override: true
      - name: check
        run: |
          cargo check
          cargo fmt --check
          cargo test -p app_core
      - name: build
        run: |
          cargo build -p app_grpc_api --target x86_64-unknown-linux-gnu --release
          docker build . -f Dockerfile.deployCILinux -t asia.gcr.io/${{ secrets.DEV_GCP_PROJECT }}/${{ env.app_name }}:${{ github.sha }}
      - name: Authenticate to Google Cloud
        id: 'google-cloud-auth'
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: "${{ secrets.GCP_WORKLOAD_ID_PROVIDER_ID }}"
          service_account: "${{ secrets.TF_GCP_SERVICE_ACCOUNT }}"
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: setup gcloud docker
        run: gcloud auth configure-docker
      - name: push dev image
        if: github.event_name == 'pull_request'
        run: docker push asia.gcr.io/${{ secrets.DEV_GCP_PROJECT }}/${{ env.app_name }}:${{ github.sha }}
      - name: push versioned image
        if: startsWith(github.ref, 'refs/tags/v')
        run: docker push asia.gcr.io/${{ secrets.DEV_GCP_PROJECT }}/${{ env.app_name }}:${{ github.ref_name }}
